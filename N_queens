# N-Queen Problem
global n
n = 5
def display(board):
    n = len(board)
    for i in range(n):
        print(board[i])
# This will check if the square (row, col) is safe for the next Queen to be placed
 
def isSafe(board, row, col):

    # checking all squares in the given Column
    for k in range(n):
        if board[k][col] == 1:
            return False
    
    # checking all squares in the Top-Right and Top-Left Diagonals
    for k in range(1, n):        
        if all(0 <= x < n for x in [row - k, col - k]):
            if board[row - k][col - k] == 1:    
                return False

        if all(0 <= x < n for x in [row - k, col + k]):
            if board[row - k][col + k] == 1:
                    return False    

    return True


def n_queens(board, row):
    if(row == n):
        display(board)
        print("\n")
        return
    
    for col in range(n):
        if isSafe(board, row, col):
            board[row][col] = 1         # Place the Queen

            n_queens(board, row+1)      # Recursively explore the child

            board[row][col] = 0         # Upon reaching a dead-end, back-track and reset
                                        # all the queens placed during exploration back to 0.    
board = [[0 for i in range(n)] for j in range(n)]
n_queens(board, 0)



###PRIMS ALGORITHM
n=int(input("Enter total number "))
l=[[0 for i in range(n)] for j in range(n)]
def display(l):
    for i in range(n):
        print(l[i])
def safe(l,row,column):
    for k in range(n):
        if(l[k][column]==1):
            return False
    for k in range(1,n):
        if all(0<=x<n for x in [row-k,column-k]):
            if(l[row-k][column-k]==1):
                return False
    for k in range(1,n):
        if all(0<=x<n for x in [row-k,column+k]):
            if(l[row-k][column+k]==1):
                return False            
    
    return True
def nqueen(l,row):
    if(row==n):
        display(l)
        print("\n")
        return
    for col in range(n):
        if safe(l,row,col):
            l[row][col]=1
            nqueen(l,row+1)
            l[row][col]=0
nqueen(l,0)            
