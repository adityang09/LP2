import os
import sys
import shutil

class FileAggregator:
    def __init__(self, aggregate_file="aggregator.txt"):
        self.aggregate_file = aggregate_file
        self.file_metadata = {}
        if os.path.exists(self.aggregate_file):
            with open(self.aggregate_file, 'r') as f:
                for line in f:
                    file_name, content = line.strip().split(':::')
                    self.file_metadata[file_name] = content

    def add_file(self, file_name):
        if os.path.exists(file_name):
            with open(file_name, 'r') as f:
                content = f.read()
            self.file_metadata[file_name] = content
            with open(self.aggregate_file, 'a') as f:
                f.write(f"{file_name}--{content}\n")
            os.remove(file_name)
        else:
            print(f"File {file_name} does not exist.")

    def remove_file(self, file_name):
        if file_name in self.file_metadata:
            content = self.file_metadata.pop(file_name)
            with open(self.aggregate_file, 'r') as f:
                lines = f.readlines()
            with open(self.aggregate_file, 'w') as f:
                for line in lines:
                    if not line.strip().startswith(file_name):
                        f.write(line)
            with open(f"cut_{file_name}", 'w') as f:
                f.write(content)
        else:
            print(f"File {file_name} does not exist in the aggregator.")

    def list_files(self):
        for file_name in self.file_metadata:
            print(file_name)

    def copy_file(self, file_name):
        if file_name in self.file_metadata:
            content = self.file_metadata[file_name]
            with open(f"copy_{file_name}", 'w') as f:
                f.write(content)
        else:
            print(f"File {file_name} does not exist in the aggregator.")

    def rename_file(self, old_name, new_name):
        if old_name in self.file_metadata:
            self.file_metadata[new_name] = self.file_metadata.pop(old_name)
            with open(self.aggregate_file, 'r') as f:
                lines = f.readlines()
            with open(self.aggregate_file, 'w') as f:
                for line in lines:
                    if line.strip().startswith(old_name):
                        f.write(f"{new_name}:::{self.file_metadata[new_name]}\n")
                    else:
                        f.write(line)
        else:
            print(f"File {old_name} does not exist in the aggregator.")

    def move_file(self, file_name, new_location):
        if file_name in self.file_metadata:
            shutil.move(file_name, new_location)
        else:
            print(f"File {file_name} does not exist in the aggregator.")

    def display_file(self, file_name):
        if file_name in self.file_metadata:
            print(self.file_metadata[file_name])
        else:
            print(f"File {file_name} does not exist in the aggregator.")

def main():
    aggregator = FileAggregator()
    if len(sys.argv) < 2:
        print("Please provide a command.")
    else:
        command = sys.argv[1]
        if command == "add":
            aggregator.add_file(sys.argv[2])
        elif command == "cut":
            aggregator.remove_file(sys.argv[2])
        elif command == "list":
            aggregator.list_files()
        elif command == "copy":
            aggregator.copy_file(sys.argv[2])
        elif command == "rename":
            aggregator.rename_file(sys.argv[2], sys.argv[3])
        elif command == "move":
            aggregator.move_file(sys.argv[2], sys.argv[3])
        elif command == "display":
            aggregator.display_file(sys.argv[2])
        else:
            print("Invalid command. Please use add, cut, list, copy, rename, move or display.")

if __name__ == "__main__":
    main()
